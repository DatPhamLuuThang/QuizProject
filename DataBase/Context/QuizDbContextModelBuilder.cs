// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace FrontEnd
{
    public partial class QuizDbContextModel
    {
        partial void Initialize()
        {
            var role = RoleEntityType.Create(this);
            var user = UserEntityType.Create(this);
            var userRole = UserRoleEntityType.Create(this);

            UserRoleEntityType.CreateForeignKey1(userRole, role);
            UserRoleEntityType.CreateForeignKey2(userRole, user);

            RoleEntityType.CreateAnnotations(role);
            UserEntityType.CreateAnnotations(user);
            UserRoleEntityType.CreateAnnotations(userRole);

            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var role = FindEntityType("DataBase.Models.Role")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            role.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var dataBaseModelsRoleTableBase = new TableBase("DataBase.Models.Role", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("Id", idColumnBase);
            var isDeletedColumnBase = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("IsDeleted", isDeletedColumnBase);
            var modifiedAtColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase);
            var modifiedByColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseModelsRoleTableBase);
            dataBaseModelsRoleTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("DataBase.Models.Role", dataBaseModelsRoleTableBase);
            var dataBaseModelsRoleMappingBase = new TableMappingBase<ColumnMappingBase>(role, dataBaseModelsRoleTableBase, true);
            dataBaseModelsRoleTableBase.AddTypeMapping(dataBaseModelsRoleMappingBase, false);
            defaultTableMappings.Add(dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, role.FindProperty("Id")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, role.FindProperty("CreatedAt")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, role.FindProperty("CreatedBy")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, role.FindProperty("Description")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase, role.FindProperty("IsDeleted")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase, role.FindProperty("ModifiedAt")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase, role.FindProperty("ModifiedBy")!, dataBaseModelsRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, role.FindProperty("Name")!, dataBaseModelsRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            role.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var roleTable = new Table("Role", null, relationalModel);
            var idColumn = new Column("Id", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("Id", idColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", roleTable);
            roleTable.Columns.Add("CreatedAt", createdAtColumn);
            var createdByColumn = new Column("CreatedBy", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("CreatedBy", createdByColumn);
            var descriptionColumn = new Column("Description", "nvarchar(max)", roleTable);
            roleTable.Columns.Add("Description", descriptionColumn);
            var isDeletedColumn = new Column("IsDeleted", "bit", roleTable);
            roleTable.Columns.Add("IsDeleted", isDeletedColumn);
            var modifiedAtColumn = new Column("ModifiedAt", "datetime2", roleTable);
            roleTable.Columns.Add("ModifiedAt", modifiedAtColumn);
            var modifiedByColumn = new Column("ModifiedBy", "uniqueidentifier", roleTable);
            roleTable.Columns.Add("ModifiedBy", modifiedByColumn);
            var nameColumn = new Column("Name", "nvarchar(max)", roleTable);
            roleTable.Columns.Add("Name", nameColumn);
            var pK_Role = new UniqueConstraint("PK_Role", roleTable, new[] { idColumn });
            roleTable.PrimaryKey = pK_Role;
            var pK_RoleUc = RelationalModel.GetKey(this,
                "DataBase.Models.Role",
                new[] { "Id" });
            pK_Role.MappedKeys.Add(pK_RoleUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RoleUc).Add(pK_Role);
            roleTable.UniqueConstraints.Add("PK_Role", pK_Role);
            relationalModel.Tables.Add(("Role", null), roleTable);
            var roleTableMapping = new TableMapping(role, roleTable, true);
            roleTable.AddTypeMapping(roleTableMapping, false);
            tableMappings.Add(roleTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, role.FindProperty("Id")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, role.FindProperty("CreatedAt")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, role.FindProperty("CreatedBy")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, role.FindProperty("Description")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn, role.FindProperty("IsDeleted")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn, role.FindProperty("ModifiedAt")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn, role.FindProperty("ModifiedBy")!, roleTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, role.FindProperty("Name")!, roleTableMapping);

            var user = FindEntityType("DataBase.Models.User")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var dataBaseModelsUserTableBase = new TableBase("DataBase.Models.User", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(max)", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("Id", idColumnBase0);
            var isDeletedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("IsDeleted", isDeletedColumnBase0);
            var modifiedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase0);
            var modifiedByColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", dataBaseModelsUserTableBase);
            dataBaseModelsUserTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("DataBase.Models.User", dataBaseModelsUserTableBase);
            var dataBaseModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, dataBaseModelsUserTableBase, true);
            dataBaseModelsUserTableBase.AddTypeMapping(dataBaseModelsUserMappingBase, false);
            defaultTableMappings0.Add(dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, user.FindProperty("Id")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, user.FindProperty("CreatedAt")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, user.FindProperty("CreatedBy")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, user.FindProperty("Email")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase0, user.FindProperty("IsDeleted")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase0, user.FindProperty("ModifiedAt")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase0, user.FindProperty("ModifiedBy")!, dataBaseModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, user.FindProperty("Name")!, dataBaseModelsUserMappingBase);

            var tableMappings0 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var userTable = new Table("User", null, relationalModel);
            var idColumn0 = new Column("Id", "uniqueidentifier", userTable);
            userTable.Columns.Add("Id", idColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", userTable);
            userTable.Columns.Add("CreatedAt", createdAtColumn0);
            var createdByColumn0 = new Column("CreatedBy", "uniqueidentifier", userTable);
            userTable.Columns.Add("CreatedBy", createdByColumn0);
            var emailColumn = new Column("Email", "nvarchar(max)", userTable);
            userTable.Columns.Add("Email", emailColumn);
            var isDeletedColumn0 = new Column("IsDeleted", "bit", userTable);
            userTable.Columns.Add("IsDeleted", isDeletedColumn0);
            var modifiedAtColumn0 = new Column("ModifiedAt", "datetime2", userTable);
            userTable.Columns.Add("ModifiedAt", modifiedAtColumn0);
            var modifiedByColumn0 = new Column("ModifiedBy", "uniqueidentifier", userTable);
            userTable.Columns.Add("ModifiedBy", modifiedByColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(max)", userTable);
            userTable.Columns.Add("Name", nameColumn0);
            var pK_User = new UniqueConstraint("PK_User", userTable, new[] { idColumn0 });
            userTable.PrimaryKey = pK_User;
            var pK_UserUc = RelationalModel.GetKey(this,
                "DataBase.Models.User",
                new[] { "Id" });
            pK_User.MappedKeys.Add(pK_UserUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserUc).Add(pK_User);
            userTable.UniqueConstraints.Add("PK_User", pK_User);
            relationalModel.Tables.Add(("User", null), userTable);
            var userTableMapping = new TableMapping(user, userTable, true);
            userTable.AddTypeMapping(userTableMapping, false);
            tableMappings0.Add(userTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, user.FindProperty("Id")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, user.FindProperty("CreatedAt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, user.FindProperty("CreatedBy")!, userTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, user.FindProperty("Email")!, userTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn0, user.FindProperty("IsDeleted")!, userTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn0, user.FindProperty("ModifiedAt")!, userTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn0, user.FindProperty("ModifiedBy")!, userTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, user.FindProperty("Name")!, userTableMapping);

            var userRole = FindEntityType("DataBase.Models.UserRole")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            userRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var dataBaseModelsUserRoleTableBase = new TableBase("DataBase.Models.UserRole", null, relationalModel);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedBy", "uniqueidentifier", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("CreatedBy", createdByColumnBase1);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("Id", idColumnBase1);
            var isDeletedColumnBase1 = new ColumnBase<ColumnMappingBase>("IsDeleted", "bit", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("IsDeleted", isDeletedColumnBase1);
            var modifiedAtColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedAt", "datetime2", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("ModifiedAt", modifiedAtColumnBase1);
            var modifiedByColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "uniqueidentifier", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase1);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "uniqueidentifier", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("RoleId", roleIdColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "uniqueidentifier", dataBaseModelsUserRoleTableBase);
            dataBaseModelsUserRoleTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("DataBase.Models.UserRole", dataBaseModelsUserRoleTableBase);
            var dataBaseModelsUserRoleMappingBase = new TableMappingBase<ColumnMappingBase>(userRole, dataBaseModelsUserRoleTableBase, true);
            dataBaseModelsUserRoleTableBase.AddTypeMapping(dataBaseModelsUserRoleMappingBase, false);
            defaultTableMappings1.Add(dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, userRole.FindProperty("Id")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, userRole.FindProperty("CreatedAt")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase1, userRole.FindProperty("CreatedBy")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase1, userRole.FindProperty("IsDeleted")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedAtColumnBase1, userRole.FindProperty("ModifiedAt")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase1, userRole.FindProperty("ModifiedBy")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, userRole.FindProperty("RoleId")!, dataBaseModelsUserRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, userRole.FindProperty("UserId")!, dataBaseModelsUserRoleMappingBase);

            var tableMappings1 = new List<TableMapping>();
            userRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var userRoleTable = new Table("UserRole", null, relationalModel);
            var idColumn1 = new Column("Id", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("Id", idColumn1);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", userRoleTable);
            userRoleTable.Columns.Add("CreatedAt", createdAtColumn1);
            var createdByColumn1 = new Column("CreatedBy", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("CreatedBy", createdByColumn1);
            var isDeletedColumn1 = new Column("IsDeleted", "bit", userRoleTable);
            userRoleTable.Columns.Add("IsDeleted", isDeletedColumn1);
            var modifiedAtColumn1 = new Column("ModifiedAt", "datetime2", userRoleTable);
            userRoleTable.Columns.Add("ModifiedAt", modifiedAtColumn1);
            var modifiedByColumn1 = new Column("ModifiedBy", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("ModifiedBy", modifiedByColumn1);
            var roleIdColumn = new Column("RoleId", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("RoleId", roleIdColumn);
            var userIdColumn = new Column("UserId", "uniqueidentifier", userRoleTable);
            userRoleTable.Columns.Add("UserId", userIdColumn);
            var pK_UserRole = new UniqueConstraint("PK_UserRole", userRoleTable, new[] { idColumn1 });
            userRoleTable.PrimaryKey = pK_UserRole;
            var pK_UserRoleUc = RelationalModel.GetKey(this,
                "DataBase.Models.UserRole",
                new[] { "Id" });
            pK_UserRole.MappedKeys.Add(pK_UserRoleUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserRoleUc).Add(pK_UserRole);
            userRoleTable.UniqueConstraints.Add("PK_UserRole", pK_UserRole);
            var iX_UserRole_RoleId = new TableIndex(
            "IX_UserRole_RoleId", userRoleTable, new[] { roleIdColumn }, false);
            var iX_UserRole_RoleIdIx = RelationalModel.GetIndex(this,
                "DataBase.Models.UserRole",
                new[] { "RoleId" });
            iX_UserRole_RoleId.MappedIndexes.Add(iX_UserRole_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserRole_RoleIdIx).Add(iX_UserRole_RoleId);
            userRoleTable.Indexes.Add("IX_UserRole_RoleId", iX_UserRole_RoleId);
            var iX_UserRole_UserId = new TableIndex(
            "IX_UserRole_UserId", userRoleTable, new[] { userIdColumn }, false);
            var iX_UserRole_UserIdIx = RelationalModel.GetIndex(this,
                "DataBase.Models.UserRole",
                new[] { "UserId" });
            iX_UserRole_UserId.MappedIndexes.Add(iX_UserRole_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserRole_UserIdIx).Add(iX_UserRole_UserId);
            userRoleTable.Indexes.Add("IX_UserRole_UserId", iX_UserRole_UserId);
            relationalModel.Tables.Add(("UserRole", null), userRoleTable);
            var userRoleTableMapping = new TableMapping(userRole, userRoleTable, true);
            userRoleTable.AddTypeMapping(userRoleTableMapping, false);
            tableMappings1.Add(userRoleTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, userRole.FindProperty("Id")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, userRole.FindProperty("CreatedAt")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn1, userRole.FindProperty("CreatedBy")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn1, userRole.FindProperty("IsDeleted")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedAtColumn1, userRole.FindProperty("ModifiedAt")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn1, userRole.FindProperty("ModifiedBy")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, userRole.FindProperty("RoleId")!, userRoleTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, userRole.FindProperty("UserId")!, userRoleTableMapping);
            var fK_UserRole_Role_RoleId = new ForeignKeyConstraint(
                "FK_UserRole_Role_RoleId", userRoleTable, roleTable,
                new[] { roleIdColumn },
                roleTable.FindUniqueConstraint("PK_Role")!, ReferentialAction.Cascade);
            var fK_UserRole_Role_RoleIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Models.UserRole",
                new[] { "RoleId" },
                "DataBase.Models.Role",
                new[] { "Id" });
            fK_UserRole_Role_RoleId.MappedForeignKeys.Add(fK_UserRole_Role_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserRole_Role_RoleIdFk).Add(fK_UserRole_Role_RoleId);
            userRoleTable.ForeignKeyConstraints.Add(fK_UserRole_Role_RoleId);
            roleTable.ReferencingForeignKeyConstraints.Add(fK_UserRole_Role_RoleId);
            var fK_UserRole_User_UserId = new ForeignKeyConstraint(
                "FK_UserRole_User_UserId", userRoleTable, userTable,
                new[] { userIdColumn },
                userTable.FindUniqueConstraint("PK_User")!, ReferentialAction.Cascade);
            var fK_UserRole_User_UserIdFk = RelationalModel.GetForeignKey(this,
                "DataBase.Models.UserRole",
                new[] { "UserId" },
                "DataBase.Models.User",
                new[] { "Id" });
            fK_UserRole_User_UserId.MappedForeignKeys.Add(fK_UserRole_User_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserRole_User_UserIdFk).Add(fK_UserRole_User_UserId);
            userRoleTable.ForeignKeyConstraints.Add(fK_UserRole_User_UserId);
            userTable.ReferencingForeignKeyConstraints.Add(fK_UserRole_User_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
